/*
 * CREST Server
 * OpenApi3 for CREST Server
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package hep.crest.server.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * StoreDto
 */
@JsonPropertyOrder({
  StoreDto.JSON_PROPERTY_HASH,
  StoreDto.JSON_PROPERTY_SINCE,
  StoreDto.JSON_PROPERTY_DATA,
  StoreDto.JSON_PROPERTY_STREAMER_INFO
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen")
public class StoreDto   {
  public static final String JSON_PROPERTY_HASH = "hash";
  @JsonProperty(JSON_PROPERTY_HASH)
  private String hash;

  public static final String JSON_PROPERTY_SINCE = "since";
  @JsonProperty(JSON_PROPERTY_SINCE)
  private BigDecimal since;

  public static final String JSON_PROPERTY_DATA = "data";
  @JsonProperty(JSON_PROPERTY_DATA)
  private String data;

  public static final String JSON_PROPERTY_STREAMER_INFO = "streamerInfo";
  @JsonProperty(JSON_PROPERTY_STREAMER_INFO)
  private String streamerInfo;

  public StoreDto hash(String hash) {
    this.hash = hash;
    return this;
  }

  /**
   * Get hash
   * @return hash
   **/
  @JsonProperty("hash")
  @ApiModelProperty(value = "")
  
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }

  public StoreDto since(BigDecimal since) {
    this.since = since;
    return this;
  }

  /**
   * Get since
   * @return since
   **/
  @JsonProperty("since")
  @ApiModelProperty(value = "")
  @Valid 
  public BigDecimal getSince() {
    return since;
  }

  public void setSince(BigDecimal since) {
    this.since = since;
  }

  public StoreDto data(String data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   **/
  @JsonProperty("data")
  @ApiModelProperty(value = "")
  
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }

  public StoreDto streamerInfo(String streamerInfo) {
    this.streamerInfo = streamerInfo;
    return this;
  }

  /**
   * Get streamerInfo
   * @return streamerInfo
   **/
  @JsonProperty("streamerInfo")
  @ApiModelProperty(value = "")
  
  public String getStreamerInfo() {
    return streamerInfo;
  }

  public void setStreamerInfo(String streamerInfo) {
    this.streamerInfo = streamerInfo;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoreDto storeDto = (StoreDto) o;
    return Objects.equals(this.hash, storeDto.hash) &&
        Objects.equals(this.since, storeDto.since) &&
        Objects.equals(this.data, storeDto.data) &&
        Objects.equals(this.streamerInfo, storeDto.streamerInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hash, since, data, streamerInfo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoreDto {\n");
    
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    since: ").append(toIndentedString(since)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    streamerInfo: ").append(toIndentedString(streamerInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

