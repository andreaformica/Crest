/*
 * Svom Message Model
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * Contact: andrea.formica@cern.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package plugin.nats.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.swagger.annotations.ApiModelProperty;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * ProcessingReportContent
 */
@JsonPropertyOrder({
  ProcessingReportContent.JSON_PROPERTY_SERVICE_DESCRIPTOR,
  ProcessingReportContent.JSON_PROPERTY_PROCESSING_DESCRIPTOR,
  ProcessingReportContent.JSON_PROPERTY_MESSAGES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen")
public class ProcessingReportContent   {
  public static final String JSON_PROPERTY_SERVICE_DESCRIPTOR = "service_descriptor";
  @JsonProperty(JSON_PROPERTY_SERVICE_DESCRIPTOR)
  private ServiceDescriptor serviceDescriptor;

  public static final String JSON_PROPERTY_PROCESSING_DESCRIPTOR = "processing_descriptor";
  @JsonProperty(JSON_PROPERTY_PROCESSING_DESCRIPTOR)
  private ProcessingDescriptor processingDescriptor;

  public static final String JSON_PROPERTY_MESSAGES = "messages";
  @JsonProperty(JSON_PROPERTY_MESSAGES)
  private List<String> messages = null;

  public ProcessingReportContent serviceDescriptor(ServiceDescriptor serviceDescriptor) {
    this.serviceDescriptor = serviceDescriptor;
    return this;
  }

  /**
   * Get serviceDescriptor
   * @return serviceDescriptor
   **/
  @JsonProperty("service_descriptor")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public ServiceDescriptor getServiceDescriptor() {
    return serviceDescriptor;
  }

  public void setServiceDescriptor(ServiceDescriptor serviceDescriptor) {
    this.serviceDescriptor = serviceDescriptor;
  }

  public ProcessingReportContent processingDescriptor(ProcessingDescriptor processingDescriptor) {
    this.processingDescriptor = processingDescriptor;
    return this;
  }

  /**
   * Get processingDescriptor
   * @return processingDescriptor
   **/
  @JsonProperty("processing_descriptor")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public ProcessingDescriptor getProcessingDescriptor() {
    return processingDescriptor;
  }

  public void setProcessingDescriptor(ProcessingDescriptor processingDescriptor) {
    this.processingDescriptor = processingDescriptor;
  }

  public ProcessingReportContent messages(List<String> messages) {
    this.messages = messages;
    return this;
  }

  public ProcessingReportContent addMessagesItem(String messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * aditionnal free text
   * @return messages
   **/
  @JsonProperty("messages")
  @ApiModelProperty(value = "aditionnal free text")
  
  public List<String> getMessages() {
    return messages;
  }

  public void setMessages(List<String> messages) {
    this.messages = messages;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessingReportContent processingReportContent = (ProcessingReportContent) o;
    return Objects.equals(this.serviceDescriptor, processingReportContent.serviceDescriptor) &&
        Objects.equals(this.processingDescriptor, processingReportContent.processingDescriptor) &&
        Objects.equals(this.messages, processingReportContent.messages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceDescriptor, processingDescriptor, messages);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessingReportContent {\n");
    
    sb.append("    serviceDescriptor: ").append(toIndentedString(serviceDescriptor)).append("\n");
    sb.append("    processingDescriptor: ").append(toIndentedString(processingDescriptor)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

