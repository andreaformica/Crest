# Default values for crest.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: registry.cern.ch/crest/crest-service
  # This sets the pull policy for images.
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  fsGroup: 208

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

container:
  port: 8080
  env:
  - name: TZ
    value: "Europe/Paris"
  - name: TNS_ADMIN
    value: /home/crestsvc

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$request_uri"
    cert-manager.io/cluster-issuer: letsencrypt
  hosts:
    - host: crest.cern.ch
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: crest-tls-cert-le
      hosts:
        - crest.cern.ch

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 4
    memory: 4Gi
  requests:
    cpu: 500m
    memory: 2Gi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /actuator/health
    port: crest-server
  initialDelaySeconds: 30
  periodSeconds: 30
readinessProbe:
  httpGet:
    path: /
    port: crest-server

#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
- name: crest-volume-data
  persistentVolumeClaim:
    claimName: scratch-vol
    readOnly: false
- name: crest-config-volume
  configMap:
    name: crest-config
- name: crest-db-auth-volume
  secret:
    secretName: crest-phys-cond-secret

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
- name: crest-volume-data
  mountPath: /home/crestsvc/data
- name: crest-config-volume
  readOnly: true
  mountPath: /home/crestsvc/config/application.properties
  subPath: crest-application-properties
- name: crest-config-volume
  readOnly: true
  mountPath: /home/crestsvc/javaopts.properties
  subPath: crest-java-opts
- name: crest-config-volume
  readOnly: true
  mountPath: /home/crestsvc/tnsnames.ora
  subPath: crest-tnsnames
- name: crest-config-volume
  readOnly: true
  mountPath: /home/crestsvc/logback.xml
  subPath: crest-logging-config
- name: crest-db-auth-volume
  mountPath: /run/secrets/crest-phys-cond
  subPath: crest-phys-cond
  readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
