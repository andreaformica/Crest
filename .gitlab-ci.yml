variables:
    IMAGE: crest-service
    VERSION: '4.0'
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"

# Make the gradle wrapper executable. This essentially downloads a copy of
# Gradle to build the project with.
# https://docs.gradle.org/current/userguide/gradle_wrapper.html
# It is expected that any modern gradle project has a wrapper
before_script:
  - chmod +x gradlew

stages:
 - package_application
 - build_docker_image
 - redeploy

package_cern_application:
  stage: package_application
  image: adoptopenjdk:11-jdk-openj9
  script:
   - ./gradlew -g /cache/.gradle clean assemble
  allow_failure: false
  artifacts:
   paths:
   - ./crestdb-web/build/libs/crest.jar

build_docker_image_job:
  stage: build_docker_image
  environment: cern
  image:
    # We recommend using the CERN version of the Kaniko image: gitlab-registry.cern.ch/ci-tools/docker-image-builder
    name: gitlab-registry.cern.ch/ci-tools/docker-image-builder
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    # Prepare Kaniko configuration file
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
      # Build and push the image from the Dockerfile at the root of the project.
      # To push to a specific docker tag, amend the --destination parameter, e.g. --destination $CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME
    # See https://docs.gitlab.com/ee/ci/variables/predefined_variables.html#variables-reference for available variables
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  allow_failure: false
  rules:
    - if: $DO_DOCKER_IMAGE == "yes" && $CI_PIPELINE_SOURCE != 'merge_request_event'

redeploy_job:
  stage: redeploy
  environment: cern
  image: gitlab-registry.cern.ch/paas-tools/openshift-client:latest
  script: "oc import-image $IMAGE_NAME  --server=$SERVER --namespace $NAMESPACE --all --token=$IMAGE_IMPORT_TOKEN"
  rules:
    - if: $DO_DEPLOY == "yes" && $CI_COMMIT_BRANCH == "deploy" && $CI_PIPELINE_SOURCE != 'merge_request_event'

