openapi: 3.0.0
info:
  version: '1.0'
  title: CREST Server
  description: OpenApi3 for CREST Server
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://crest-undertow.web.cern.ch/api'
security:
  - BearerAuth: []
  - OpenID:
      - openid
tags:
  - name: admin
  - name: folders
  - name: globaltagmaps
  - name: globaltags
  - name: tags
  - name: iovs
  - name: monitoring
  - name: payloads
  - name: runinfo
paths:
  '/admin/globaltags/{name}':
    put:
      tags:
        - admin
      summary: Update a GlobalTag in the database.
      description: 'This method allows to update a GlobalTag.Arguments: the name has to uniquely identify a global tag.'
      operationId: updateGlobalTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalTagDto'
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTagDto'
    delete:
      tags:
        - admin
      summary: Remove a GlobalTag from the database.
      description: 'This method allows to remove a GlobalTag.Arguments: the name has to uniquely identify a global tag.'
      operationId: removeGlobalTag
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
  '/admin/tags/{name}':
    delete:
      tags:
        - admin
      summary: Remove a Tag from the database.
      description: 'This method allows to remove a Tag.Arguments: the name has to uniquely identify a tag.'
      operationId: removeTag
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
  /folders:
    post:
      tags:
        - folders
      summary: Create an entry for folder information.
      description: Folder informations go into a dedicated table.
      operationId: createFolder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderDto'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderDto'
    get:
      tags:
        - folders
      summary: Finds a FolderDto list.
      description: 'This method allows to perform search and sorting.Arguments: by=<pattern>, sort=<sortpattern>. The pattern <pattern> is in the form <param-name><operation><param-value>       <param-name> is the name of one of the fields in the dto       <operation> can be [< : >] ; for string use only [:]        <param-value> depends on the chosen parameter. A list of this criteria can be provided       using comma separated strings for <pattern>.      The pattern <sortpattern> is <field>:[DESC|ASC]'
      operationId: listFolders
      parameters:
        - name: by
          in: query
          description: 'by: the search pattern {none}'
          required: false
          schema:
            type: string
            default: none
        - name: sort
          in: query
          description: 'sort: the sort pattern {nodeFullpath:ASC}'
          required: false
          schema:
            type: string
            default: 'nodeFullpath:ASC'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderSetDto'
  /globaltagmaps:
    post:
      tags:
        - globaltagmaps
      summary: Create a GlobalTagMap in the database.
      description: 'This method allows to insert a GlobalTagMap.Arguments: GlobalTagMapDto should be provided in the body as a JSON file.'
      operationId: createGlobalTagMap
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalTagMapDto'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTagMapDto'
  '/globaltagmaps/{name}':
    get:
      tags:
        - globaltagmaps
      summary: Find GlobalTagMapDto lists.
      description: This method search for mappings using the global tag name.
      operationId: findGlobalTagMap
      parameters:
        - name: X-Crest-MapMode
          in: header
          description: If the mode is BackTrace then it will search for global tags containing the tag <name>
          schema:
            default: Trace
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTagMapDto'
    delete:
      tags:
        - globaltagmaps
      summary: Delete GlobalTagMapDto lists.
      description: This method search for mappings using the global tag name and deletes all mappings.
      operationId: deleteGlobalTagMap
      parameters:
        - name: name
          in: path
          description: the global tag name
          required: true
          schema:
            type: string
        - name: label
          in: query
          description: 'label: the generic name labelling all tags of a certain kind.'
          required: true
          schema:
            type: string
            default: none
        - name: record
          in: query
          description: 'record: the record.'
          required: false
          schema:
            type: string
        - name: tagname
          in: query
          description: 'tagname: the name of the tag associated.'
          required: true
          schema:
            type: string
            default: none
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTagMapDto'
  /globaltags:
    get:
      tags:
        - globaltags
      summary: Finds a GlobalTagDtos lists.
      description: 'This method allows to perform search and sorting.Arguments: by=<pattern>, page={ipage}, size={isize}, sort=<sortpattern>. The pattern <pattern> is in the form <param-name><operation><param-value>       <param-name> is the name of one of the fields in the dto       <operation> can be [< : >] ; for string use only [:]        <param-value> depends on the chosen parameter. A list of this criteria can be provided       using comma separated strings for <pattern>.      The pattern <sortpattern> is <field>:[DESC|ASC]'
      operationId: listGlobalTags
      parameters:
        - name: by
          in: query
          description: 'by: the search pattern {none}'
          required: false
          schema:
            type: string
            default: none
        - name: page
          in: query
          description: 'page: the page number {0}'
          required: false
          schema:
            type: integer
            default: 0
            format: int32
        - name: size
          in: query
          description: 'size: the page size {1000}'
          required: false
          schema:
            type: integer
            default: 1000
            format: int32
        - name: sort
          in: query
          description: 'sort: the sort pattern {name:ASC}'
          required: false
          schema:
            type: string
            default: 'name:ASC'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTagSetDto'
        '404':
          description: resource not found
          content:
            application/json: {}
            application/xml: {}
    post:
      tags:
        - globaltags
      summary: Create a GlobalTag in the database.
      description: 'This method allows to insert a GlobalTag.Arguments: GlobalTagDto should be provided in the body as a JSON file.'
      operationId: createGlobalTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalTagDto'
      parameters:
        - name: force
          in: query
          description: 'force: tell the server if it should use or not the insertion time provided {default: false}'
          required: false
          schema:
            type: string
            default: false
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTagDto'
  '/globaltags/{name}':
    get:
      tags:
        - globaltags
      summary: Finds a GlobalTagDto by name
      description: This method will search for a global tag with the given name. Only one global tag should be returned.
      operationId: findGlobalTag
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTagSetDto'
        '404':
          description: resource not found
          content:
            application/json: {}
            application/xml: {}
  '/globaltags/{name}/tags':
    get:
      tags:
        - globaltags
      summary: Finds a TagDtos lists associated to the global tag name in input.
      description: 'This method allows to trace a global tag.Arguments: record=<record> filter output by record, label=<label> filter output by label'
      operationId: findGlobalTagFetchTags
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: record
          in: query
          description: 'record:  the record string {}'
          required: false
          schema:
            type: string
            default: none
        - name: label
          in: query
          description: 'label:  the label string {}'
          required: false
          schema:
            type: string
            default: none
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagSetDto'
  /tags:
    get:
      tags:
        - tags
      summary: Finds a TagDtos lists.
      description: 'This method allows to perform search and sorting.Arguments: by=<pattern>, page={ipage}, size={isize}, sort=<sortpattern>. The pattern <pattern> is in the form <param-name><operation><param-value>       <param-name> is the name of one of the fields in the dto       <operation> can be [< : >] ; for string use only [:]        <param-value> depends on the chosen parameter. A list of this criteria can be provided       using comma separated strings for <pattern>.      The pattern <sortpattern> is <field>:[DESC|ASC]'
      operationId: listTags
      parameters:
        - name: by
          in: query
          description: 'by: the search pattern {none}'
          required: false
          schema:
            type: string
            default: none
        - name: page
          in: query
          description: 'page: the page number {0}'
          required: false
          schema:
            type: integer
            default: 0
            format: int32
        - name: size
          in: query
          description: 'size: the page size {1000}'
          required: false
          schema:
            type: integer
            default: 1000
            format: int32
        - name: sort
          in: query
          description: 'sort: the sort pattern {name:ASC}'
          required: false
          schema:
            type: string
            default: 'name:ASC'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagSetDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/TagSetDto'
    post:
      tags:
        - tags
      summary: Create a Tag in the database.
      description: 'This method allows to insert a Tag.Arguments: TagDto should be provided in the body as a JSON file.'
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/TagDto'
  '/tags/{name}':
    get:
      tags:
        - tags
      summary: Finds a TagDto by name
      description: This method will search for a tag with the given name. Only one tag should be returned.
      operationId: findTag
      parameters:
        - name: name
          in: path
          description: 'name: the tag name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagSetDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/TagSetDto'
    put:
      tags:
        - tags
      summary: Update a TagDto by name
      description: 'This method will search for a tag with the given name, and update its content for the provided body fields. Only the following fields can be updated: description, timeType, objectTime, endOfValidity, lastValidatedTime.'
      operationId: updateTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericMap'
      parameters:
        - name: name
          in: path
          description: 'name: the tag name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/TagDto'
  '/tags/{name}/meta':
    get:
      tags:
        - tags
      summary: Finds a TagMetaDto by name
      description: This method will search for a tag metadata with the given name. Only one tag should be returned.
      operationId: findTagMeta
      parameters:
        - name: name
          in: path
          description: 'name: the tag name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagMetaSetDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/TagMetaSetDto'
    post:
      tags:
        - tags
      summary: Create a TagMeta in the database.
      description: 'This method allows to insert a TagMeta.Arguments: TagMetaDto should be provided in the body as a JSON file.'
      operationId: createTagMeta
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagMetaDto'
      parameters:
        - name: name
          in: path
          description: 'name: the tag name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagMetaDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/TagMetaDto'
    put:
      tags:
        - tags
      summary: Update a TagMetaDto by name
      description: 'This method will search for a tag with the given name, and update its content for the provided body fields. Only the following fields can be updated: description, timeType, objectTime, endOfValidity, lastValidatedTime.'
      operationId: updateTagMeta
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericMap'
      parameters:
        - name: name
          in: path
          description: 'name: the tag name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagMetaDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/TagMetaDto'
  /iovs:
    get:
      tags:
        - iovs
      summary: Finds a IovDtos lists.
      description: 'This method allows to perform search by tagname and sorting.Arguments: tagname={a tag name}, page={ipage}, size={isize},      sort=<pattern>, where pattern is <field>:[DESC|ASC]'
      operationId: findAllIovs
      parameters:
        - name: by
          in: query
          description: 'you need a mandatory tagname:xxxx. Additional field can be since or insertionTime rules.'
          required: true
          schema:
            type: string
            default: none
        - name: page
          in: query
          description: 'page: the page number {0}'
          required: false
          schema:
            type: integer
            default: 0
            format: int32
        - name: size
          in: query
          description: 'size: the page size {10000}'
          required: false
          schema:
            type: integer
            default: 10000
            format: int32
        - name: sort
          in: query
          description: 'sort: the sort pattern {id.since:ASC}'
          required: false
          schema:
            type: string
            default: 'id.since:ASC'
        - in: header
          name: dateformat
          description: 'The format of the input time fields: {yyyyMMdd''T''HHmmssX | ms} DEFAULT: ms (so it is a long). Used for insertionTime comparaison.'
          schema:
            default: ms
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IovSetDto'
    post:
      tags:
        - iovs
      summary: Create a Iov in the database.
      description: 'This method allows to insert a Iov.Arguments: IovDto should be provided in the body as a JSON file.'
      operationId: createIov
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IovDto'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IovDto'
  /iovs/storebatch:
    post:
      tags:
        - iovs
      summary: 'Create many IOVs in the database, associated to a tag name.'
      description: 'This method allows to insert multiple IOVs. Arguments: tagname,end time.'
      operationId: storeBatchIovMultiForm
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IovSetDto'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IovSetDto'
  /iovs/selectSnapshot:
    get:
      tags:
        - iovs
      summary: Select snapshot for a given tagname and insertion time.
      description: 'This method allows to select a list of all iovs in a tag, using (optionally) a given snapshot time.Arguments: tagname={a tag name}, snapshot={snapshot time as long}'
      operationId: selectSnapshot
      parameters:
        - name: tagname
          in: query
          description: 'tagname: the tag name {none}'
          required: true
          schema:
            type: string
            default: none
        - name: snapshot
          in: query
          description: 'snapshot: the snapshot time {0}'
          required: true
          schema:
            type: integer
            default: 0
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IovSetDto'
  /iovs/lastIov:
    get:
      tags:
        - iovs
      summary: Select last iov for a given tagname and before a given since.
      description: 'This method allows to select the last iov in a tag, before a given time and (optionally) for a given snapshot time.Arguments: tagname={a tag name}, since={since time as string}, snapshot={snapshot time as long}'
      operationId: lastIov
      parameters:
        - name: tagname
          in: query
          description: 'tagname: the tag name {none}'
          required: false
          schema:
            type: string
            default: none
        - name: since
          in: query
          description: 'since: the since time '
          required: false
          schema:
            type: string
            default: now
        - name: snapshot
          in: query
          description: 'snapshot: the snapshot time {0}'
          required: false
          schema:
            type: integer
            default: 0
            format: int64
        - in: header
          name: dateformat
          description: 'The format of the input time fields: {yyyyMMdd''T''HHmmssX | ms} DEFAULT: ms (so it is a long). Used for insertionTime comparaison.'
          schema:
            default: ms
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IovSetDto'
  /iovs/selectIovPayloads:
    get:
      tags:
        - iovs
      summary: Select iovs and payload meta info for a given tagname and in a given range.
      description: 'This method allows to select a list of iovs+payload meta in a tag, using a given range in time and (optionally) for a given snapshot time.Arguments: tagname={a tag name}, since={since time as string}, until={until time as string}, snapshot={snapshot time as long}'
      operationId: selectIovPayloads
      parameters:
        - name: X-Crest-Query
          in: header
          description: 'The query type. The header parameter X-Crest-Query can be : groups (default) or ranges (include previous since).'
          schema:
            default: groups
            type: string
        - name: tagname
          in: query
          description: 'tagname: the tag name {none}'
          required: false
          schema:
            type: string
            default: none
        - name: since
          in: query
          description: 'since: the since time as a string {0}'
          required: false
          schema:
            type: string
            default: '0'
        - name: until
          in: query
          description: 'until: the until time as a string {INF}'
          required: false
          schema:
            type: string
            default: INF
        - name: snapshot
          in: query
          description: 'snapshot: the snapshot time {0}'
          required: false
          schema:
            type: integer
            default: 0
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IovPayloadSetDto'
  /iovs/selectIovs:
    get:
      tags:
        - iovs
      summary: Select iovs for a given tagname and in a given range.
      description: 'This method allows to select a list of iovs in a tag, using a given range in time and (optionally) for a given snapshot time.Arguments: tagname={a tag name}, since={since time as string}, until={until time as string}, snapshot={snapshot time as long}'
      operationId: selectIovs
      parameters:
        - name: X-Crest-Query
          in: header
          description: 'The query type. The header parameter X-Crest-Query can be : groups (default) or ranges (include previous since).'
          schema:
            default: groups
            type: string
        - name: tagname
          in: query
          description: 'tagname: the tag name {none}'
          required: false
          schema:
            type: string
            default: none
        - name: since
          in: query
          description: 'since: the since time as a string {0}'
          required: false
          schema:
            type: string
            default: '0'
        - name: until
          in: query
          description: 'until: the until time as a string {INF}'
          required: false
          schema:
            type: string
            default: INF
        - name: snapshot
          in: query
          description: 'snapshot: the snapshot time {0}'
          required: false
          schema:
            type: integer
            default: 0
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IovSetDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/IovSetDto'
  /iovs/selectGroups:
    get:
      tags:
        - iovs
      summary: Select groups for a given tagname.
      description: 'This method allows to select a list of groups.Arguments: tagname={a tag name}, snapshot={snapshot time as long}'
      operationId: selectGroups
      parameters:
        - name: tagname
          in: query
          description: 'tagname: the tag name {none}'
          required: true
          schema:
            type: string
            default: none
        - name: snapshot
          in: query
          description: 'snapshot: the snapshot time {0}'
          required: false
          schema:
            type: integer
            default: 0
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IovSetDto'
  /iovs/getSizeByTag:
    get:
      tags:
        - iovs
      summary: Get the number o iovs for tags matching pattern.
      description: 'This method allows to select the count of iovs in a tag. Also possible to get the size of snapshot, if the time is added. Arguments: tagname={a tag name}'
      operationId: getSizeByTag
      parameters:
        - name: tagname
          in: query
          description: 'tagname: the tag name {none}'
          required: true
          schema:
            type: string
            default: none
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagSummarySetDto'
  /iovs/getSize:
    get:
      tags:
        - iovs
      summary: Get the number o iovs for the given tag.
      description: 'This method allows to select the count of iovs in a tag. Also possible to get the size of snapshot, if the time added.Arguments: tagname={a tag name}, snapshotTime={snapshot time in milliseconds (Long) from epoch}'
      operationId: getSize
      parameters:
        - name: tagname
          in: query
          description: 'tagname: the tag name {none}'
          required: true
          schema:
            type: string
            default: none
        - name: snapshot
          in: query
          description: 'snapshot: the snapshot time {0}'
          required: false
          schema:
            type: integer
            default: 0
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrestBaseResponse'
  /payloads:
    post:
      tags:
        - payloads
      summary: Create a Payload in the database.
      description: 'This method allows to insert a Payload.Arguments: PayloadDto should be provided in the body as a JSON file.'
      operationId: createPayload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayloadDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayloadDto'
  '/payloads/{hash}':
    get:
      tags:
        - payloads
      summary: Finds a payload resource associated to the hash.
      description: 'This method retrieves a payload resource.Arguments: hash=<hash> the hash of the payload'
      operationId: getPayload
      parameters:
        - in: header
          name: X-Crest-PayloadFormat
          description: 'The format of the output data. The header parameter X-Crest-PayloadFormat can be : BLOB (default) or DTO (in JSON format).'
          schema:
            default: BLOB
            type: string
        - name: hash
          in: path
          description: 'hash:  the hash of the payload'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/*:
              schema:
                type: string
            text/plain:
              schema:
                type: string
  '/payloads/{hash}/meta':
    get:
      tags:
        - payloads
      summary: Finds a payload resource associated to the hash.
      description: 'This method retrieves metadata of the payload resource.Arguments: hash=<hash> the hash of the payload'
      operationId: getPayloadMetaInfo
      parameters:
        - name: hash
          in: path
          description: 'hash:  the hash of the payload'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayloadSetDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/PayloadSetDto'
    put:
      tags:
        - payloads
      summary: Update a streamerInfo in a payload
      description: 'This method will get a payload from its hash, and update streamer info content for the provided body fields: streamerInfo.'
      operationId: updatePayload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericMap'
      parameters:
        - name: hash
          in: path
          description: 'hash:  the hash of the payload'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayloadSetDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/PayloadSetDto'
  /payloads/storebatch:
    post:
      tags:
        - payloads
      summary: 'Create many Payloads in the database, associated to a given iov since list and tag name.'
      description: 'This method allows to insert a Payload and an IOV. Arguments: tagname,stream,end time. The header parameter X-Crest-PayloadFormat can be : JSON (default) or TXT or BLOB'
      operationId: storePayloadBatchWithIovMultiForm
      requestBody:
        description: A json string that is used to construct the form data object.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                tag:
                  description: The tag name
                  type: string
                iovsetupload:
                  description: The list of iovs as a set
                  type: string
                objectType:
                  description: The object type
                  type: string
                version:
                  description: The version
                  type: string
                endtime:
                  description: The end time
                  type: number
                streamerInfo:
                  description: The streamerInfo CLOB as a string
                  type: string
              required:
                - files
                - iovsetupload
                - tag
                - since
      parameters:
        - in: header
          name: X-Crest-PayloadFormat
          description: The format of the input data
          schema:
            default: FILE
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IovSetDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/IovSetDto'
  /payloads/uploadbatch:
    post:
      tags:
        - payloads
      summary: 'Create many Payloads in the database, associated to a given iov since list and tag name.'
      description: 'This method allows to insert a Payload and an IOV. Arguments: tagname,stream,end time. The header parameter X-Crest-PayloadFormat can be : JSON (default) or TXT or BLOB'
      operationId: uploadPayloadBatchWithIovMultiForm
      requestBody:
        description: A json string that is used to construct the form data object.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  description: The payload files as an array of streams
                  type: array
                  items:
                    type: string
                    format: binary
                tag:
                  description: The tag name
                  type: string
                iovsetupload:
                  description: The list of iovs
                  type: string
                objectType:
                  description: The object type
                  type: string
                version:
                  description: The version
                  type: string
                endtime:
                  description: The end time
                  type: number
                streamerInfo:
                  description: The streamerInfo CLOB as a string
                  type: string
              required:
                - files
                - iovsetupload
                - tag
                - since
      parameters:
        - in: header
          name: X-Crest-PayloadFormat
          description: The format of the input data
          schema:
            default: FILE
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IovSetDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/IovSetDto'
  /payloads/store:
    post:
      tags:
        - payloads
      summary: 'Create a Payload in the database, associated to a given iov since and tag name.'
      description: 'This method allows to insert a Payload and an IOV. Arguments: since,tagname,stream,end time. The header parameter X-Crest-PayloadFormat can be : JSON (default) or TXT or BLOB'
      operationId: storePayloadWithIovMultiForm
      requestBody:
        description: A json string that is used to construct the form data object.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: The payload file as a stream
                  type: string
                  format: binary
                tag:
                  description: The tag name
                  type: string
                since:
                  description: The since time
                  type: number
                objectType:
                  description: The object type
                  type: string
                version:
                  description: The version
                  type: string
                endtime:
                  description: The end time
                  type: number
                streamerInfo:
                  description: The streamerInfo CLOB as a string
                  type: string
              required:
                - file
                - tag
                - since
      parameters:
        - name: X-Crest-PayloadFormat
          in: header
          description: The format of the input data
          schema:
            default: JSON
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPResponse'
  /payloads/upload:
    post:
      tags:
        - payloads
      summary: Create a Payload in the database.
      description: 'This method allows to insert a Payload.Arguments: PayloadDto should be provided in the body as a JSON file.'
      operationId: createPayloadMultiForm
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                payload:
                  type: string
              required:
                - file
                - payload
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayloadDto'
  /monitoring/payloads:
    get:
      tags:
        - monitoring
      summary: Retrieves monitoring information on payload as a list of PayloadTagInfoDtos.
      description: 'This method allows to perform search and sorting.Arguments: by=<pattern>, page={ipage}, size={isize}, sort=<sortpattern>. The pattern <pattern> is in the form <param-name><operation><param-value>       <param-name> is the name of one of the fields in the dto       <operation> can be [< : >] ; for string use only [:]        <param-value> depends on the chosen parameter. A list of this criteria can be provided       using comma separated strings for <pattern>.      The pattern <sortpattern> is <field>:[DESC|ASC]'
      operationId: listPayloadTagInfo
      parameters:
        - name: tagname
          in: query
          description: 'tagname: the search pattern {none}'
          required: false
          schema:
            type: string
            default: none
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayloadTagInfoSetDto'
  /runinfo/select:
    get:
      tags:
        - runinfo
      summary: Finds a RunLumiInfoDto lists using parameters.
      description: 'This method allows to perform search.Arguments: from=<someformat>,to=<someformat>, format=<describe previous types>, page={ipage}, size={isize}, sort=<sortpattern>. The pattern <pattern> is in the form <param-name><operation><param-value>       <param-name> is the name of one of the fields in the dto       <operation> can be [< : >] ; for string use only [:]        <param-value> depends on the chosen parameter. A list of this criteria can be provided       using comma separated strings for <pattern>.      The pattern <sortpattern> is <field>:[DESC|ASC]'
      operationId: selectRunInfo
      parameters:
        - name: from
          in: query
          description: 'from: the starting time or run-lumi'
          required: false
          schema:
            type: string
            default: none
        - name: to
          in: query
          description: 'to: the ending time or run-lumi'
          required: false
          schema:
            type: string
            default: none
        - name: format
          in: query
          description: 'format: the format to digest previous arguments [iso], [number]. Time(iso) = yyyymmddhhmiss, Run(number) = runnumber, Time(number) = milliseconds'
          required: false
          schema:
            type: string
            default: number
        - name: mode
          in: query
          description: 'mode: the mode for the request : [daterange] or [runrange]. Interprets'
          required: false
          schema:
            type: string
            default: runrange
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunLumiSetDto'
  /runinfo:
    post:
      tags:
        - runinfo
      summary: Create an entry for run information.
      description: Run informations go into a separate table.
      operationId: createRunInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunLumiSetDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunLumiSetDto'
    get:
      tags:
        - runinfo
      summary: Finds a RunLumiInfoDto lists.
      description: 'This method allows to perform search and sorting.Arguments: by=<pattern>, page={ipage}, size={isize}, sort=<sortpattern>. The pattern <pattern> is in the form <param-name><operation><param-value>       <param-name> is the name of one of the fields in the dto       <operation> can be [< : >] ; for string use only [:]        <param-value> depends on the chosen parameter. A list of this criteria can be provided       using comma separated strings for <pattern>.      The pattern <sortpattern> is <field>:[DESC|ASC]'
      operationId: listRunInfo
      parameters:
        - name: by
          in: query
          description: 'by: the search pattern {none}'
          required: false
          schema:
            type: string
            default: none
        - name: page
          in: query
          description: 'page: the page number {0}'
          required: false
          schema:
            type: integer
            default: 0
            format: int32
        - name: size
          in: query
          description: 'size: the page size {1000}'
          required: false
          schema:
            type: integer
            default: 1000
            format: int32
        - name: sort
          in: query
          description: 'sort: the sort pattern {since:ASC}'
          required: false
          schema:
            type: string
            default: 'since:ASC'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunLumiSetDto'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    OpenID:
      type: openIdConnect
      openIdConnectUrl: 'https://auth.cern.ch/auth/realms/cern/.well-known/openid-configuration'
  requestBodies:
    GenericMapBody:
      description: A JSON object containing generic map used for updates
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericMap'
  schemas:
    HTTPResponse:
      description: general response object that can be used for POST and PUT methods
      type: object
      required:
        - code
        - message
      properties:
        timestamp:
          type: string
          format: date-time
        code:
          type: integer
          description: HTTP status code of the response
        error:
          type: string
        type:
          type: string
          description: A generic string specifying the exception type.
        message:
          type: string
        id:
          type: string
          description: path or URI of the requested or generated resource
    CrestBaseResponse:
      type: object
      properties:
        size:
          type: integer
          format: int64
        datatype:
          type: string
        format:
          type: string
        page:
          $ref: '#/components/schemas/RespPage'
        filter:
          $ref: '#/components/schemas/GenericMap'
      discriminator:
        propertyName: format
    RespPage:
      type: object
      required:
        - size
        - totalElements
        - totalPages
        - number
      properties:
        size:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        number:
          type: integer
    GenericMap:
      type: object
      properties:
        name:
          type: string
      additionalProperties:
        type: string
    TagDto:
      type: object
      properties:
        name:
          type: string
        timeType:
          type: string
        payloadSpec:
          type: string
        synchronization:
          type: string
        description:
          type: string
        lastValidatedTime:
          type: number
        endOfValidity:
          type: number
        insertionTime:
          type: string
          format: date-time
        modificationTime:
          type: string
          format: date-time
    TagSetDto:
      description: An Set containing TagDto objects.
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
        - properties:
            resources:
              type: array
              items:
                $ref: '#/components/schemas/TagDto'
    TagMetaSetDto:
      description: An Set containing TagMetaDto objects.
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
        - properties:
            resources:
              type: array
              items:
                $ref: '#/components/schemas/TagMetaDto'
    TagMetaDto:
      type: object
      properties:
        tagName:
          type: string
        description:
          type: string
        chansize:
          type: integer
          format: int32
        colsize:
          type: integer
          format: int32
        tagInfo:
          type: string
        insertionTime:
          type: string
          format: date-time
    GlobalTagDto:
      type: object
      properties:
        name:
          type: string
        validity:
          type: number
        description:
          type: string
        release:
          type: string
        insertionTime:
          type: string
          format: date-time
        snapshotTime:
          type: string
          format: date-time
        scenario:
          type: string
        workflow:
          type: string
        type:
          type: string
        snapshotTimeMilli:
          type: integer
          format: int64
        insertionTimeMilli:
          type: integer
          format: int64
    FolderDto:
      type: object
      properties:
        nodeFullpath:
          type: string
        schemaName:
          type: string
        nodeName:
          type: string
        nodeDescription:
          type: string
        tagPattern:
          type: string
        groupRole:
          type: string
    FolderSetDto:
      description: An FolderSet containing FolderDto objects.
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
        - properties:
            resources:
              type: array
              items:
                $ref: '#/components/schemas/FolderDto'
    GlobalTagMapSetDto:
      description: An GlobalTagMapSet containing GlobalTagMapDto objects.
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
        - properties:
            resources:
              type: array
              items:
                $ref: '#/components/schemas/GlobalTagMapDto'
    GlobalTagMapDto:
      type: object
      properties:
        globalTagName:
          type: string
        record:
          type: string
        label:
          type: string
        tagName:
          type: string
    GlobalTagSetDto:
      description: An GlobalTagSet containing GlobalTagDto objects.
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
        - properties:
            resources:
              type: array
              items:
                $ref: '#/components/schemas/GlobalTagDto'
    IovSetDto:
      description: An Set containing IovDto objects.
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
        - properties:
            resources:
              type: array
              items:
                $ref: '#/components/schemas/IovDto'
    IovDto:
      type: object
      required:
        - since
        - payloadHash
      properties:
        tagName:
          type: string
        since:
          type: number
        insertionTime:
          type: string
          format: date-time
        payloadHash:
          type: string
    IovPayloadSetDto:
      description: An Set containing IovPayloadDto objects.
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
        - properties:
            resources:
              type: array
              items:
                $ref: '#/components/schemas/IovPayloadDto'
    IovPayloadDto:
      type: object
      properties:
        since:
          type: number
        insertionTime:
          type: string
          format: date-time
        version:
          type: string
        objectType:
          type: string
        size:
          type: integer
          format: int32
        payloadHash:
          type: string
        streamerInfo:
          type: string
    PayloadSetDto:
      description: An Set containing PayloadDto objects.
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
        - properties:
            resources:
              type: array
              items:
                $ref: '#/components/schemas/PayloadDto'
    PayloadDto:
      type: object
      properties:
        hash:
          type: string
        version:
          type: string
        objectType:
          type: string
        size:
          type: integer
          format: int32
        data:
          type: string
          format: byte
        streamerInfo:
          type: string
          format: byte
        insertionTime:
          type: string
          format: date-time
    PayloadTagInfoSetDto:
      description: An PayloadTagInfoSet containing PayloadTagInfoDto objects.
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
        - properties:
            resources:
              type: array
              items:
                $ref: '#/components/schemas/PayloadTagInfoDto'
    PayloadTagInfoDto:
      type: object
      properties:
        tagname:
          type: string
        niovs:
          type: integer
        totvolume:
          type: number
          format: float
        avgvolume:
          type: number
          format: float
    TagSummarySetDto:
      description: An Set containing TagSummaryDto objects.
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
        - properties:
            resources:
              type: array
              items:
                $ref: '#/components/schemas/TagSummaryDto'
    TagSummaryDto:
      type: object
      properties:
        tagname:
          type: string
        niovs:
          type: integer
          format: int64
    RunLumiSetDto:
      description: An RunLumiSet containing RunLumiInfoDto objects.
      allOf:
        - $ref: '#/components/schemas/CrestBaseResponse'
        - properties:
            format:
              type: string
              default: RunLumiSetDto
            resources:
              type: array
              items:
                $ref: '#/components/schemas/RunLumiInfoDto'
    RunLumiInfoDto:
      type: object
      properties:
        since:
          type: number
        runNumber:
          type: number
        lb:
          type: number
        starttime:
          type: number
        endtime:
          type: number
