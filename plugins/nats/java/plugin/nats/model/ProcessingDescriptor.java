/*
 * Svom Message Model
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * Contact: andrea.formica@cern.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package plugin.nats.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Descriptor of the current processing
 */
@ApiModel(description = "Descriptor of the current processing")
@JsonPropertyOrder({
  ProcessingDescriptor.JSON_PROPERTY_PROCESS_ID,
  ProcessingDescriptor.JSON_PROPERTY_PROCESS_NAME,
  ProcessingDescriptor.JSON_PROPERTY_TARGET,
  ProcessingDescriptor.JSON_PROPERTY_SUBMISSION_DATE,
  ProcessingDescriptor.JSON_PROPERTY_COMPLETION_DATE,
  ProcessingDescriptor.JSON_PROPERTY_INPUT_DATA,
  ProcessingDescriptor.JSON_PROPERTY_PROCESSING_STATUS,
  ProcessingDescriptor.JSON_PROPERTY_MESSAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen")
public class ProcessingDescriptor   {
  public static final String JSON_PROPERTY_PROCESS_ID = "process_id";
  @JsonProperty(JSON_PROPERTY_PROCESS_ID)
  private String processId;

  public static final String JSON_PROPERTY_PROCESS_NAME = "process_name";
  @JsonProperty(JSON_PROPERTY_PROCESS_NAME)
  private String processName;

  public static final String JSON_PROPERTY_TARGET = "target";
  @JsonProperty(JSON_PROPERTY_TARGET)
  private Target target;

  public static final String JSON_PROPERTY_SUBMISSION_DATE = "submission_date";
  @JsonProperty(JSON_PROPERTY_SUBMISSION_DATE)
  private OffsetDateTime submissionDate;

  public static final String JSON_PROPERTY_COMPLETION_DATE = "completion_date";
  @JsonProperty(JSON_PROPERTY_COMPLETION_DATE)
  private OffsetDateTime completionDate;

  public static final String JSON_PROPERTY_INPUT_DATA = "input_data";
  @JsonProperty(JSON_PROPERTY_INPUT_DATA)
  private List<String> inputData = null;

  public static final String JSON_PROPERTY_PROCESSING_STATUS = "processing_status";
  @JsonProperty(JSON_PROPERTY_PROCESSING_STATUS)
  private ProcStatus processingStatus;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  private String message;

  public ProcessingDescriptor processId(String processId) {
    this.processId = processId;
    return this;
  }

  /**
   * Get processId
   * @return processId
   **/
  @JsonProperty("process_id")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public String getProcessId() {
    return processId;
  }

  public void setProcessId(String processId) {
    this.processId = processId;
  }

  public ProcessingDescriptor processName(String processName) {
    this.processName = processName;
    return this;
  }

  /**
   * Get processName
   * @return processName
   **/
  @JsonProperty("process_name")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public String getProcessName() {
    return processName;
  }

  public void setProcessName(String processName) {
    this.processName = processName;
  }

  public ProcessingDescriptor target(Target target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   **/
  @JsonProperty("target")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public Target getTarget() {
    return target;
  }

  public void setTarget(Target target) {
    this.target = target;
  }

  public ProcessingDescriptor submissionDate(OffsetDateTime submissionDate) {
    this.submissionDate = submissionDate;
    return this;
  }

  /**
   * Generic type for the Dates. Using Date as classname make the generator including java import in the Py code
   * @return submissionDate
   **/
  @JsonProperty("submission_date")
  @ApiModelProperty(required = true, value = "Generic type for the Dates. Using Date as classname make the generator including java import in the Py code")
  @NotNull 
  public OffsetDateTime getSubmissionDate() {
    return submissionDate;
  }

  public void setSubmissionDate(OffsetDateTime submissionDate) {
    this.submissionDate = submissionDate;
  }

  public ProcessingDescriptor completionDate(OffsetDateTime completionDate) {
    this.completionDate = completionDate;
    return this;
  }

  /**
   * Generic type for the Dates. Using Date as classname make the generator including java import in the Py code
   * @return completionDate
   **/
  @JsonProperty("completion_date")
  @ApiModelProperty(value = "Generic type for the Dates. Using Date as classname make the generator including java import in the Py code")
  
  public OffsetDateTime getCompletionDate() {
    return completionDate;
  }

  public void setCompletionDate(OffsetDateTime completionDate) {
    this.completionDate = completionDate;
  }

  public ProcessingDescriptor inputData(List<String> inputData) {
    this.inputData = inputData;
    return this;
  }

  public ProcessingDescriptor addInputDataItem(String inputDataItem) {
    if (this.inputData == null) {
      this.inputData = new ArrayList<>();
    }
    this.inputData.add(inputDataItem);
    return this;
  }

  /**
   * Get inputData
   * @return inputData
   **/
  @JsonProperty("input_data")
  @ApiModelProperty(value = "")
  
  public List<String> getInputData() {
    return inputData;
  }

  public void setInputData(List<String> inputData) {
    this.inputData = inputData;
  }

  public ProcessingDescriptor processingStatus(ProcStatus processingStatus) {
    this.processingStatus = processingStatus;
    return this;
  }

  /**
   * Get processingStatus
   * @return processingStatus
   **/
  @JsonProperty("processing_status")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public ProcStatus getProcessingStatus() {
    return processingStatus;
  }

  public void setProcessingStatus(ProcStatus processingStatus) {
    this.processingStatus = processingStatus;
  }

  public ProcessingDescriptor message(String message) {
    this.message = message;
    return this;
  }

  /**
   * aditionnal free text
   * @return message
   **/
  @JsonProperty("message")
  @ApiModelProperty(value = "aditionnal free text")
  
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessingDescriptor processingDescriptor = (ProcessingDescriptor) o;
    return Objects.equals(this.processId, processingDescriptor.processId) &&
        Objects.equals(this.processName, processingDescriptor.processName) &&
        Objects.equals(this.target, processingDescriptor.target) &&
        Objects.equals(this.submissionDate, processingDescriptor.submissionDate) &&
        Objects.equals(this.completionDate, processingDescriptor.completionDate) &&
        Objects.equals(this.inputData, processingDescriptor.inputData) &&
        Objects.equals(this.processingStatus, processingDescriptor.processingStatus) &&
        Objects.equals(this.message, processingDescriptor.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(processId, processName, target, submissionDate, completionDate, inputData, processingStatus, message);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessingDescriptor {\n");
    
    sb.append("    processId: ").append(toIndentedString(processId)).append("\n");
    sb.append("    processName: ").append(toIndentedString(processName)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    submissionDate: ").append(toIndentedString(submissionDate)).append("\n");
    sb.append("    completionDate: ").append(toIndentedString(completionDate)).append("\n");
    sb.append("    inputData: ").append(toIndentedString(inputData)).append("\n");
    sb.append("    processingStatus: ").append(toIndentedString(processingStatus)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

