buildscript {
}
plugins {
    id "org.sonarqube" version "3.0"
    id 'jacoco'
}

ext {
    swaggerDirectory = "$rootDir/openapi".toString()
    swaggerSpecDirectory =  "$swaggerDirectory".toString()
    swaggerBundleDirectory = "$swaggerDirectory/bundle".toString()
    swaggerJaxrsTemplateDirectory = "$swaggerDirectory/templates/java/JavaJaxRs/openApi-5.1.0".toString()
}

repositories {
    mavenCentral()
}

ext {
    oltu_version = "1.0.1"
    orika_version = "1.5.4"
    jersey2_version = "2.22.2"
    querydsl_version = "4.4.0"
    server = "undertow"
}

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'java'

    group = 'hep.crest'
    version = '4.0-SNAPSHOT'
    repositories {
        mavenCentral()
    }

    jacoco {
        //toolVersion = '0.8.4'
        reportsDir = file("$buildDir/reports/jacoco")
    }
    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "hep/crest/data/**/Q*.*",
                        "hep/crest/server/swagger/api/*",
                        "hep/crest/server/swagger/model/*",
                ])
            }))
        }

        reports {
            xml.enabled true
            csv.enabled false
            html.destination file("${buildDir}/jacocoHtml")
        }
    }
}

// An example for sonarqube configuration: to run the code on a local sonarqube instance you should
// use commands like : ./gradlew sonarqube   -Dsonar.host.url=http://localhost:9000   -Dsonar.login=180fe2ea3c768359eb5fa680f7bbe6667ceeb238
//./gradlew sonarqube -Dsonar.projectKey=crest -Dsonar.host.url=http://localhost:9000 -Dsonar.login=d7bef5b1a70c8f5812a14c196d9920c65ecbc28c
sonarqube {
    properties {
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.login", "d7bef5b1a70c8f5812a14c196d9920c65ecbc28c"
        property "sonar.projectKey", "crest"
        property "sonar.projectName", "crest"
        property "sonar.junit.reportPaths", "build/test-results/test"
        property 'sonar.coverage.exclusions', "**/hep/crest/swagger/model/*" +
                "**/hep/crest/server/swagger/api/*,**/hep/crest/data/dialect/*," +
                "**/hep/crest/data/pojo/*,**/hep/crest/server/security/*," +
                "**/hep/crest/server/autoconfig/*," +
                "**/hep/crest/server/config/BuilderPropertyResolver.java," +
                "**/hep/crest/data/ApplicationData*"
        property "sonar.exclusions", "**/hep/crest/swagger/model/*," +
                "**/hep/crest/server/swagger/api/*,**/hep/crest/data/dialect/*," +
                "**/hep/crest/data/pojo/*,**/hep/crest/server/security/*," +
                "**/hep/crest/server/autoconfig/*," +
                "**/hep/crest/server/config/BuilderPropertyResolver.java," +
                "**/hep/crest/data/ApplicationData*"
    }
}

subprojects {
    sourceCompatibility = 11
    targetCompatibility = 11

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    repositories {
        mavenCentral()
    }

    configurations {
        compile.exclude module: "tomcat-jdbc"
        compile.exclude module: 'log4j-api'
    }

    dependencies {

        // DATABASES
        implementation "com.oracle.ojdbc:ojdbc8:19.3.0.0"
        // SQLLite does not work with Java 11
        // https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
        runtimeOnly 'com.github.gwenn:sqlite-dialect:0.1.2'
        runtimeOnly group: 'org.xerial', name: 'sqlite-jdbc', version: '3.39.3.0'

        implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.8'
        runtimeOnly group: 'mysql', name: 'mysql-connector-java', version: '5.1.13'
        runtimeOnly("com.h2database:h2:1.4.200")
        implementation("commons-io:commons-io:2.6")
        implementation group: 'commons-codec', name: 'commons-codec', version: '1.11'

    }

    task wrapper(type: Wrapper) {
        gradleVersion = '7.5.1' //version required
    }

    // Clean files and directories used for unit testing
    task purgedb(type: Delete) {
        delete fileTree('/tmp') {
            include 'crest*.db'
            include 'crest*sqlite*'
            include 'tagtar*'
        }
        delete '/tmp/cdms'
    }
    test.dependsOn purgedb
}


