package hep.crest.data.pojo;
// Generated Aug 2, 2016 3:50:25 PM by Hibernate Tools 3.2.2.GA

import java.sql.Blob;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Lob;
import javax.persistence.PrePersist;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.Accessors;
import org.hibernate.annotations.Type;

import hep.crest.data.config.DatabasePropertyConfigurator;

/**
 * Payload generated by hbm2java.
 */
@Entity
@Table(name = "PAYLOAD", schema = DatabasePropertyConfigurator.SCHEMA_NAME)
// This object represents a Payload.
// Define default constructors.
@NoArgsConstructor
@Data
@Accessors(fluent = true)
public class Payload {

    /**
     * The hash.
     */
    @Id
    @Column(name = "HASH", unique = true, nullable = false, length = 64)
    private String hash;
    /**
     * The version.
     */
    @Column(name = "VERSION", nullable = false, length = 20)
    private String version;
    /**
     * The object type.
     */
    @Column(name = "OBJECT_TYPE", nullable = false, length = 100)
    private String objectType;
    /**
     * The size.
     */
    @Column(name = "DATA_SIZE", nullable = true)
    private Integer size;
    /**
     * The data blob. It will be transformed in a stream or byte array.
     */
    @Column(name = "DATA", nullable = false)
    @Lob
    @Type(type = "org.hibernate.type.BlobType")
    private Blob data;
    /**
     * The streamer info blob.
     * This blob can be used to improve deserialization or as well to track actions performed
     * using this payload.
     */
    @Column(name = "STREAMER_INFO", nullable = false)
    @Lob
    @Type(type = "org.hibernate.type.BlobType")
    private Blob streamerInfo;
    /**
     * The insertion time.
     */
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "INSERTION_TIME", nullable = false, length = 11)
    private Date insertionTime;

    /**
     * Before saving the object.
     *
     * @return
     */
    @PrePersist
    public void prePersist() {
        if (this.insertionTime == null) {
            final Timestamp now = Timestamp.from(Instant.now());
            this.insertionTime = now;
        }
    }
}
