openapi: 3.0.0

info:
  $ref: 'schemas/common.yml#/info'

servers:
  $ref: 'schemas/common.yml#/servers'

security:
  $ref: 'schemas/common.yml#/security'

tags:
  - name: tags


paths:
  /tags:
    get:
      tags:
        - tags
      summary: Finds a TagDtos lists.
      description: 'This method allows to perform search and sorting.Arguments: by=<pattern>, page={ipage}, size={isize}, sort=<sortpattern>. The pattern <pattern> is in the form <param-name><operation><param-value>       <param-name> is the name of one of the fields in the dto       <operation> can be [< : >] ; for string use only [:]        <param-value> depends on the chosen parameter. A list of this criteria can be provided       using comma separated strings for <pattern>.      The pattern <sortpattern> is <field>:[DESC|ASC]'
      operationId: listTags
      parameters:
        - name: by
          in: query
          description: 'by: the search pattern {none}'
          required: false
          schema:
            type: string
            default: none
        - name: page
          in: query
          description: 'page: the page number {0}'
          required: false
          schema:
            type: integer
            default: 0
            format: int32
        - name: size
          in: query
          description: 'size: the page size {1000}'
          required: false
          schema:
            type: integer
            default: 1000
            format: int32
        - name: sort
          in: query
          description: 'sort: the sort pattern {name:ASC}'
          required: false
          schema:
            type: string
            default: name:ASC
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagSetDto"
            application/xml:
              schema:
                $ref: "#/components/schemas/TagSetDto"
    post:
      tags:
        - tags
      summary: Create a Tag in the database.
      description: 'This method allows to insert a Tag.Arguments: TagDto should be provided in the body as a JSON file.'
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagDto"
            application/xml:
              schema:
                $ref: "#/components/schemas/TagDto"
  /tags/{name}:
    get:
      tags:
        - tags
      summary: Finds a TagDto by name
      description: This method will search for a tag with the given name. Only one tag should be returned.
      operationId: findTag
      parameters:
        - name: name
          in: path
          description: 'name: the tag name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagSetDto"
            application/xml:
              schema:
                $ref: "#/components/schemas/TagSetDto"
    put:
      tags:
        - tags
      summary: Update a TagDto by name
      description: 'This method will search for a tag with the given name, and update its content for the provided body fields. Only the following fields can be updated: description, timeType, objectTime, endOfValidity, lastValidatedTime.'
      operationId: updateTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericMap'
      parameters:
        - name: name
          in: path
          description: 'name: the tag name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagDto"
            application/xml:
              schema:
                $ref: "#/components/schemas/TagDto"

components:
  securitySchemes:
    $ref: 'schemas/common.yml#/components/securitySchemes'
  requestBodies:
    $ref: 'schemas/common.yml#/components/requestBodies'

  schemas:
    # commons
    HTTPResponse:
      $ref: 'schemas/common.yml#/components/schemas/HTTPResponse'
    CrestBaseResponse:
      $ref: 'schemas/common.yml#/components/schemas/CrestBaseResponse'
    RespPage:
      $ref: 'schemas/common.yml#/components/schemas/RespPage'
    GenericMap:
      $ref: 'schemas/common.yml#/components/schemas/GenericMap'

    TagSetDto:
      $ref: 'schemas/tags.yml#/components/schemas/TagSetDto'
    TagDto:
      $ref: 'schemas/tags.yml#/components/schemas/TagDto'
