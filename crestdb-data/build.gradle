plugins {
  	id 'checkstyle'
    id 'java-library'
    //id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'org.springframework.boot' version '2.5.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}
description = 'JPA package for persistency'

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "io.freefair.lombok"

repositories {
    mavenCentral()
}

task checkCode {
  dependsOn 'checkstyleMain'
}

checkCode.doLast {
  println 'Code checked !'
}

checkstyleMain {
    setExcludes(new HashSet(['**/org/**/*java','**/hep/crest/data/**/Q*java','**/hep/crest/data/repositories/externals/*','**/hep/crest/data/dialect/*']))
}

tasks.withType(Checkstyle) {
  checkstyleTest.enabled = false
  reports {
    xml.enabled false
    html.enabled true
  }
}

//sourceCompatibility = 1.8
//targetCompatibility = 1.8

dependencies {
////   	compile files("${project.rootDir}/jarlib/ojdbc7-12.1.0.2.jar")   
    annotationProcessor     "com.querydsl:querydsl-apt:$querydsl_version:jpa"
    annotationProcessor     'org.springframework.boot:spring-boot-starter-data-jpa' // needed because the query dsl annotation processor doesn't recognize javax.persistence.Entity
    implementation (group: 'com.querydsl', name: 'querydsl-core', version: querydsl_version) {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'com.google.code.findbugs', module: 'annotations'
    }
    implementation (group: 'com.querydsl', name: 'querydsl-jpa', version: querydsl_version) {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'com.google.code.findbugs', module: 'annotations'
    }

    implementation ("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation group: 'org.apache.commons', name: 'commons-compress', version: '1.15'
    implementation group: 'org.glassfish.jersey.core', name: 'jersey-common', version: '2.30.1'

//    testImplementation('org.junit.jupiter:junit-jupiter:5.4.0')
//    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.4.0")
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }

    //testImplementation('org.junit.platform:junit-platform-launcher:1.5.2')
}

jar {
    enabled = true
}

sourceSets {
	main {
		java {
		  srcDirs = ['src/main/java', 'generated/java']
		}
	}
}

compileJava {
    options.compilerArgs << "-s"
    options.compilerArgs << "$projectDir/generated/java"

    doFirst {
    	// Remove the generated directory
        if ( file(new File(projectDir, "/generated")).exists() ) {
            file(new File(projectDir, "/generated")).deleteDir()
		}
        // make sure that directory exists
        file(new File(projectDir, "/generated/java")).mkdirs()
    }
}

clean.doLast {
    // clean-up directory when necessary
    file(new File(projectDir, "/generated")).deleteDir()
    file(new File("/tmp/cdms")).deleteDir()
}

test {
    useJUnitPlatform()
}

