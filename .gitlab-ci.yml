variables:
    IMAGE: crest-service
    VERSION: '4.1'
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"

# Make the gradle wrapper executable. This essentially downloads a copy of
# Gradle to build the project with.
# https://docs.gradle.org/current/userguide/gradle_wrapper.html
# It is expected that any modern gradle project has a wrapper
before_script:
  - chmod +x gradlew

include:
  - project : 'ci-tools/container-image-ci-templates'
    file : 'kaniko-image.gitlab-ci.yml'
    ref: master

stages:
 - package_application
 - build_docker_image
 - sonar_application
 - redeploy

package_cern_application:
  stage: package_application
  environment: cern
  image: adoptopenjdk:11-jdk-openj9
  script:
   - ./gradlew -g /cache/.gradle clean assemble
  allow_failure: false
  artifacts:
   paths:
   - ./build/libs/crest.jar
  rules:
    - if: $SITE == "cern"

package_svom_application:
  stage: package_application
  environment: svom
  image: adoptopenjdk:11-jdk-openj9
  script:
    - ./gradlew -g /cache/.gradle clean addPlugin assemble
  allow_failure: false
  artifacts:
    paths:
      - ./build/libs/crest.jar
  rules:
    - if: $SITE == "svom"

sonar_application_job:
  stage: sonar_application
  environment: svom
  image: adoptopenjdk:11-jdk-openj9
  script:
    - ./gradlew sonarqube -Dsonar.projectKey=crest -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
  allow_failure: false
  rules:
    - if: $SITE == "svom" && $CI_COMMIT_BRANCH == "quality"

build_container_job:
  rules:
    - if: $DO_DOCKER_IMAGE == "yes" && $CI_PIPELINE_SOURCE != 'merge_request_event' && $SITE == "cern"
  environment: cern
  stage: build_docker_image
  extends: .build_kaniko
  variables:
    REGISTRY_IMAGE_PATH : "registry.cern.ch/crest/$IMAGE:$VERSION"
    CONTEXT_DIR: ""
    PUSH_IMAGE: "true"
    DOCKER_FILE_NAME: "Dockerfile"

redeploy_job:
  stage: redeploy
  environment: cern
  image: gitlab-registry.cern.ch/paas-tools/openshift-client:latest
  script: "oc import-image $IMAGE_NAME  --server=$SERVER --namespace $NAMESPACE --all --token=$IMAGE_IMPORT_TOKEN"
  rules:
    - if: $DO_DEPLOY == "yes" && $CI_COMMIT_BRANCH == "deploy" && $CI_PIPELINE_SOURCE != 'merge_request_event' && $SITE == "cern"

build_docker_image_svom:
  stage: build_docker_image
  environment: svom
  image: $REGISTRY/python-ci:1.1
  before_script:
    - docker login -u svom -p $REGISTRY_PASSWORD $REGISTRY
  script:
    - docker build --rm --tag=$REGISTRY/$IMAGE:$CI_COMMIT_REF_NAME --file Dockerfile .
    - docker push $REGISTRY/$IMAGE:$CI_COMMIT_REF_NAME
  rules:
    - if: $DO_DOCKER_IMAGE == "yes" && $CI_PIPELINE_SOURCE != 'merge_request_event' && $SITE == "svom"
